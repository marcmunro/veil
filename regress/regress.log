- Creating regression test objects...
- Loading the veil extension...
NOTICE:  extension "veil" does not exist, skipping
DROP EXTENSION
CREATE EXTENSION
CREATE FUNCTION
- Creating tables...
- ...privileges...
CREATE TABLE
psql:./regress_tables.sql:20: NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "privilege__pk" for table "privileges"
ALTER TABLE
- ...role...
CREATE TABLE
psql:./regress_tables.sql:28: NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "role__pk" for table "roles"
ALTER TABLE
- ...role_privileges...
CREATE TABLE
psql:./regress_tables.sql:37: NOTICE:  ALTER TABLE / ADD PRIMARY KEY will create implicit index "role_privilege__pk" for table "role_privileges"
ALTER TABLE
ALTER TABLE
ALTER TABLE
- Populating tables...
BEGIN
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
INSERT 0 1
COMMIT
Performing regression tests...
-
- ...test set 1: variables...
PREP
NOTICE:  veil_init returns true to veil_perform_reset
NOTICE:  vl_complete_context_switch returns true to veil_perform_reset
 t

NOTICE:  veil_init returns true to veil_perform_reset
NOTICE:  vl_complete_context_switch returns true to veil_perform_reset
 t

TEST 1.1 ~ #1 *| *VEIL_SHMEMCTL#Initial variable listing
     1 | VEIL_SHMEMCTL

- NOTE Test 1.1 will fail (correctly) if this is not a freshly created database
-
TEST 1.2 = #42#create session int4
            42

TEST 1.3 = #42#retrieve session int4
            42

TEST 1.4 ~ #sess_int4 *\| *Int4 *\| *f#list defined variables
 VEIL_SHMEMCTL | ShmemCtl | t
 sess_int4     | Int4     | f

TEST 1.5 ~ #shared_int4 *\| *Undefined *\| *t#create shared int4
 f

 VEIL_SHMEMCTL | ShmemCtl  | t
 shared_int4   | Undefined | t
 sess_int4     | Int4      | f

TEST 1.6 = #99#get shared int4
       99

TEST 1.7 ~ #shared_int4 *\| *Int4 *\| *t#list defined variables
 VEIL_SHMEMCTL | ShmemCtl | t
 shared_int4   | Int4     | t
 sess_int4     | Int4     | f

TEST 1.8 ~ #ERROR.*mismatch#access non-existant session range
ERROR:  type mismatch in sess_range: expected Range, got Undefined
DETAIL:  Variable sess_range is not of the expected type.
TEST 1.9 = #14#create session range
              14

PREP
 f

TEST 1.10 = #1#create shared ranged
               1

TEST 1.11 ~ #5 *| *3#list defined variables
     5 |      3

- NOTE Test 1.11 will fail (correctly) if this is not a freshly created database
-
TEST 1.12 ~ #11 *| *24#show session range
  11 |  24

TEST 1.13 ~ #17 *| *17#show shared range
  17 |  17

TEST 1.14 ~ #ERROR.*mismatch#fetch against undefined int4 array
ERROR:  type mismatch in sess_int4array: expected Int4Array, got Undefined
DETAIL:  Variable sess_int4array is not of the expected type.
TEST 1.15 ~ #ERROR.*mismatch#set against undefined int4 array
ERROR:  type mismatch in sess_int4array: expected Int4Array, got Undefined
DETAIL:  Variable sess_int4array is not of the expected type.
TEST 1.16 = #t#create session int4 array
 t

TEST 1.17 ~ #range error#attempt to set arrary element out of range
ERROR:  Int4ArraySet range error
DETAIL:  Index (12) not in range 17..17.  
TEST 1.18 = #14#set int4 array element
                 14

TEST 1.19 = #14#fetch int4 array element
                 14

PREP
 t

TEST 1.20 = #0#clear array and fetch element
                  0

PREP
 f

 t

TEST 1.21 = #14#define and fetch from shared int4 array
                 14

TEST 1.22 = #14#shared int4 array get
                 14

PREP
              14

 t

 t

                 24

                 11

-
- ...test set 1a: variables (second process)...
TEST 1.23 ~ #4 *| *4#list all shared variables
     4 |      4

- NOTE Test 1.23 may fail if this is not a freshly created database
-
TEST 1.24 = #99#get shared int4
       99

TEST 1.25 = #0#Before de-serialising session variables
       0

PREP
                1
                1
                1
                1
                1

TEST 1.25 = #5#Checking session variables are de-serialised
       5

TEST 1.26 ~ #17 *| *17#Checking Range of range variable
  17 |  17

TEST 1.27 ~ #11 *| *24#Checking Range of range2 variable
Performing regression tests...
NOTICE:  veil_init returns true to veil_perform_reset
NOTICE:  vl_complete_context_switch returns true to veil_perform_reset
 t

NOTICE:  veil_init returns true to veil_perform_reset
NOTICE:  vl_complete_context_switch returns true to veil_perform_reset
 t

TEST 1.1 ~ #1 *| *VEIL_SHMEMCTL#Initial variable listing
     1 | VEIL_SHMEMCTL
MATCH ~ "1 | VEIL_SHMEMCTL"

PASS
END TEST 1.1

TEST 1.2 = #42#create session int4
            42
MATCH = "42"

PASS
END TEST 1.2

TEST 1.3 = #42#retrieve session int4
            42
MATCH = "42"

PASS
END TEST 1.3

TEST 1.4 ~ #sess_int4 *\| *Int4 *\| *f#list defined variables
 VEIL_SHMEMCTL | ShmemCtl | t
 sess_int4     | Int4     | f
MATCH ~ "sess_int4     | Int4     | f"

PASS
END TEST 1.4

TEST 1.5 ~ #shared_int4 *\| *Undefined *\| *t#create shared int4
 f

 VEIL_SHMEMCTL | ShmemCtl  | t
 shared_int4   | Undefined | t
MATCH ~ "shared_int4   | Undefined | t"
 sess_int4     | Int4      | f

PASS
END TEST 1.5

TEST 1.6 = #99#get shared int4
       99
MATCH = "99"

PASS
END TEST 1.6

TEST 1.7 ~ #shared_int4 *\| *Int4 *\| *t#list defined variables
 VEIL_SHMEMCTL | ShmemCtl | t
 shared_int4   | Int4     | t
MATCH ~ "shared_int4   | Int4     | t"
 sess_int4     | Int4     | f

PASS
END TEST 1.7

TEST 1.8 ~ #ERROR.*mismatch#access non-existant session range
ERROR:  type mismatch in sess_range: expected Range, got Undefined
MATCH ~ "ERROR:  type mismatch in sess_range: expected Range, got Undefined"
DETAIL:  Variable sess_range is not of the expected type.
PASS
END TEST 1.8

TEST 1.9 = #14#create session range
              14
MATCH = "14"

PASS
END TEST 1.9

 f

TEST 1.10 = #1#create shared ranged
               1
MATCH = "1"

PASS
END TEST 1.10

TEST 1.11 ~ #5 *| *3#list defined variables
     5 |      3
MATCH ~ "5 |      3"

PASS
END TEST 1.11

TEST 1.12 ~ #11 *| *24#show session range
  11 |  24
MATCH ~ "11 |  24"

PASS
END TEST 1.12

TEST 1.13 ~ #17 *| *17#show shared range
  17 |  17
MATCH ~ "17 |  17"

PASS
END TEST 1.13

TEST 1.14 ~ #ERROR.*mismatch#fetch against undefined int4 array
ERROR:  type mismatch in sess_int4array: expected Int4Array, got Undefined
MATCH ~ "ERROR:  type mismatch in sess_int4array: expected Int4Array, got Undefined"
DETAIL:  Variable sess_int4array is not of the expected type.
PASS
END TEST 1.14

TEST 1.15 ~ #ERROR.*mismatch#set against undefined int4 array
ERROR:  type mismatch in sess_int4array: expected Int4Array, got Undefined
MATCH ~ "ERROR:  type mismatch in sess_int4array: expected Int4Array, got Undefined"
DETAIL:  Variable sess_int4array is not of the expected type.
PASS
END TEST 1.15

TEST 1.16 = #t#create session int4 array
 t
MATCH = "t"

PASS
END TEST 1.16

TEST 1.17 ~ #range error#attempt to set arrary element out of range
ERROR:  Int4ArraySet range error
MATCH ~ "ERROR:  Int4ArraySet range error"
DETAIL:  Index (12) not in range 17..17.  
PASS
END TEST 1.17

TEST 1.18 = #14#set int4 array element
                 14
MATCH = "14"

PASS
END TEST 1.18

TEST 1.19 = #14#fetch int4 array element
                 14
MATCH = "14"

PASS
END TEST 1.19

 t

TEST 1.20 = #0#clear array and fetch element
                  0
MATCH = "0"

PASS
END TEST 1.20

 f

 t

TEST 1.21 = #14#define and fetch from shared int4 array
                 14
MATCH = "14"

PASS
END TEST 1.21

TEST 1.22 = #14#shared int4 array get
                 14
MATCH = "14"

PASS
END TEST 1.22

              14

 t

 t

                 24

                 11

TEST 1.23 ~ #4 *| *4#list all shared variables
     4 |      4
MATCH ~ "4 |      4"

PASS
END TEST 1.23

TEST 1.24 = #99#get shared int4
       99
MATCH = "99"

PASS
END TEST 1.24

TEST 1.25 = #0#Before de-serialising session variables
       0
MATCH = "0"

PASS
END TEST 1.25

                1
                1
                1
                1
                1

TEST 1.25 = #5#Checking session variables are de-serialised
       5
MATCH = "5"

PASS
END TEST 1.25

TEST 1.26 ~ #17 *| *17#Checking Range of range variable
  17 |  17
MATCH ~ "17 |  17"

PASS
END TEST 1.26

TEST 1.27 ~ #11 *| *24#Checking Ran  11 |  24

TEST 1.28 = #24#Checking array2 variable(1)
                 24

TEST 1.29 = #11#Checking array2 variable(2)
                 11

TEST 1.30 = #0#Checking array2 variable(3)
                  0

- ...test set 2: bitmaps...
PREP
              70

               2

 f

TEST 2.1 ~ #OK#Initialise shared and session bitmaps
 OK       | t                | t

TEST 2.2 = #3#Populate shared bitmap
     3

TEST 2.3 = #2#Populate session bitmap
     2

PREP
TEST 2.4 = #t#Test for known true values in session and shared bitmaps
 t

TEST 2.5 = #f#Test for known false value
 f

TEST 2.6 = #t#Clear sessionbitmap
 t

TEST 2.7 = #f#Test for absence of previous true value in shared bitmap
 f

TEST 2.8 ~ #20001.*|.*20070#Test bitmap range
 20001 | 20070

TEST 2.9 ~ #3.*|.*20070#Test bitmap bits
     3 | 20070

TEST 2.10 = #20070#Further test bitmap bits
            20001
            20002
            20070

-
- ...test set 2a: bitmaps (second process)...
PREP
 t

TEST 2.11 != #20070#Check that shared bitmap has bit cleared
            20001
            20002

TEST 2.12 = #2#Check that shared bitmap has other bits still set
     2

PREP
                1

TEST 2.13 = #t#Test for known true values in serialised session bitmap
 t

PREP
 t                | t                | t

 t                  | t                  | t                  | t

 t                 | t

TEST 2.13 ~ #20001 *| *20003 *| *3#Check union of bitmaps
 20001 | 20003 |     3

PREP
 t                     | t

TEST 2.14 ~ #20002 *| *20002 *| *1#Check bitmap intersection
 20002 | 20002 |     1

-
- ...test set 3: bitmap arrays...
PREP
               2

              70

TEST 3.1 = #t#Create bitmap array
 t

TEST 3.2 = #f#Test false bit
 f

TEST 3.3 = #t#Set bit
 t

TEST 3.4 = #t#Test newly true bit
 t

TEST 3.5 = #t#Clear the aray
 t

TEST 3.6 = #f#Test that bit again
 f

PREP
 f

TEST 3.7 ~ #ERROR.*illegal#Attempt to create shared bitmap ref
ERROR:  illegal attempt to define shared BitmapRef shared_bitmap_ref
HINT:  BitmapRefs may only be defined as session, not shared, variables.
TEST 3.8 ~ #session_bitmap_refx#Create session bitmap ref
 session_bitmap_refx

TEST 3.9 ~ #ERROR.*not.*defined#Check for bitmap ref not in transaction
ERROR:  BitmapRef session_bitmap_ref is not defined
HINT:  Perhaps the name is mis-spelled, or its definition is missing from veil_init().
PREP
 session_bitmap_ref

 t                  | t

TEST 3.10 ~ #2 *| *20001 *| *20003#Add bits thru ref, check bits in array
     2 | 20001 | 20003

PREP
 session_bitmap_ref

 t

TEST 3.11 ~ #2 *| *20001 *| *20003#Union through ref, check bits in array
     2 | 20001 | 20003

PREP
 t

 t

 t

TEST 3.12 ~ #1 *| *20003 *| *20003#Intersect thru ref, check bits in array
     1 | 20003 | 20003

PREP
TEST 3.13 ~ #10001.*10002#Check array range
 10001 | 10002

TEST 3.14 ~ #20001.*20070#Check bitmaps range
 20001 | 20070

PREP
 f

 t

 session_bitmap_ref

ge of range2 variable
  11 |  24
MATCH ~ "11 |  24"

PASS
END TEST 1.27

TEST 1.28 = #24#Checking array2 variable(1)
                 24
MATCH = "24"

PASS
END TEST 1.28

TEST 1.29 = #11#Checking array2 variable(2)
                 11
MATCH = "11"

PASS
END TEST 1.29

TEST 1.30 = #0#Checking array2 variable(3)
                  0
MATCH = "0"

PASS
END TEST 1.30

              70

               2

 f

TEST 2.1 ~ #OK#Initialise shared and session bitmaps
 OK       | t                | t
MATCH ~ "OK       | t                | t"

PASS
END TEST 2.1

TEST 2.2 = #3#Populate shared bitmap
     3
MATCH = "3"

PASS
END TEST 2.2

TEST 2.3 = #2#Populate session bitmap
     2
MATCH = "2"

PASS
END TEST 2.3

TEST 2.4 = #t#Test for known true values in session and shared bitmaps
 t
MATCH = "t"

PASS
END TEST 2.4

TEST 2.5 = #f#Test for known false value
 f
MATCH = "f"

PASS
END TEST 2.5

TEST 2.6 = #t#Clear sessionbitmap
 t
MATCH = "t"

PASS
END TEST 2.6

TEST 2.7 = #f#Test for absence of previous true value in shared bitmap
 f
MATCH = "f"

PASS
END TEST 2.7

TEST 2.8 ~ #20001.*|.*20070#Test bitmap range
 20001 | 20070
MATCH ~ "20001 | 20070"

PASS
END TEST 2.8

TEST 2.9 ~ #3.*|.*20070#Test bitmap bits
     3 | 20070
MATCH ~ "3 | 20070"

PASS
END TEST 2.9

TEST 2.10 = #20070#Further test bitmap bits
            20001
            20002
            20070
MATCH = "20070"

PASS
END TEST 2.10

 t

TEST 2.11 != #20070#Check that shared bitmap has bit cleared
            20001
            20002

PASS
END TEST 2.11

TEST 2.12 = #2#Check that shared bitmap has other bits still set
     2
MATCH = "2"

PASS
END TEST 2.12

                1

TEST 2.13 = #t#Test for known true values in serialised session bitmap
 t
MATCH = "t"

PASS
END TEST 2.13

 t                | t                | t

 t                  | t                  | t                  | t

 t                 | t

TEST 2.13 ~ #20001 *| *20003 *| *3#Check union of bitmaps
 20001 | 20003 |     3
MATCH ~ "20001 | 20003 |     3"

PASS
END TEST 2.13

 t                     | t

TEST 2.14 ~ #20002 *| *20002 *| *1#Check bitmap intersection
 20002 | 20002 |     1
MATCH ~ "20002 | 20002 |     1"

PASS
END TEST 2.14

               2

              70

TEST 3.1 = #t#Create bitmap array
 t
MATCH = "t"

PASS
END TEST 3.1

TEST 3.2 = #f#Test false bit
 f
MATCH = "f"

PASS
END TEST 3.2

TEST 3.3 = #t#Set bit
 t
MATCH = "t"

PASS
END TEST 3.3

TEST 3.4 = #t#Test newly true bit
 t
MATCH = "t"

PASS
END TEST 3.4

TEST 3.5 = #t#Clear the aray
 t
MATCH = "t"

PASS
END TEST 3.5

TEST 3.6 = #f#Test that bit again
 f
MATCH = "f"

PASS
END TEST 3.6

 f

TEST 3.7 ~ #ERROR.*illegal#Attempt to create shared bitmap ref
ERROR:  illegal attempt to define shared BitmapRef shared_bitmap_ref
MATCH ~ "ERROR:  illegal attempt to define shared BitmapRef shared_bitmap_ref"
HINT:  BitmapRefs may only be defined as session, not shared, variables.
PASS
END TEST 3.7

TEST 3.8 ~ #session_bitmap_refx#Create session bitmap ref
 session_bitmap_refx
MATCH ~ "session_bitmap_refx"

PASS
END TEST 3.8

TEST 3.9 ~ #ERROR.*not.*defined#Check for bitmap ref not in transaction
ERROR:  BitmapRef session_bitmap_ref is not defined
MATCH ~ "ERROR:  BitmapRef session_bitmap_ref is not defined"
HINT:  Perhaps the name is mis-spelled, or its definition is missing from veil_init().
PASS
END TEST 3.9

 session_bitmap_ref

 t                  | t

TEST 3.10 ~ #2 *| *20001 *| *20003#Add bits thru ref, check bits in array
     2 | 20001 | 20003
MATCH ~ "2 | 20001 | 20003"

PASS
END TEST 3.10

 session_bitmap_ref

 t

TEST 3.11 ~ #2 *| *20001 *| *20003#Union through ref, check bits in array
     2 | 20001 | 20003
MATCH ~ "2 | 20001 | 20003"

PASS
END TEST 3.11

 t

 t

 t

TEST 3.12 ~ #1 *| *20003 *| *20003#Intersect thru ref, check bits in array
     1 | 20003 | 20003
MATCH ~ "1 | 20003 | 20003"

PASS
END TEST 3.12

TEST 3.13 ~ #10001.*10002#Check array range
 10001 | 10002
MATCH ~ "10001 | 10002"

PASS
END TEST 3.13

TEST 3.14 ~ #20001.*20070#Check bitmaps range
 20001 | 20070
MATCH ~ "20001 | 20070"

PASS
END TEST 3.14

 f

 t

 session_bitmap_ t

-
- ...test set 3a: bitmap arrays (second process)...
TEST 3.15 ~ #1 *| *20003 *| *20003#Check bits in shared bitmap array
     1 | 20003 | 20003

PREP
                1

TEST 3.16 ~ #10001.*10002#Check array range after de-serialisation
 10001 | 10002

TEST 3.17 ~ #20001.*20070#Check bitmaps range after de-serialisation
 20001 | 20070

TEST 3.18 ~ #1 *\| *20003 *\| *20003#Check bits in array after de-ser.
     1 | 20003 | 20003

-
- ...test set 4: bitmap hashes...
PREP
              70

TEST 4.1 = #t#Create session bitmap hash
 t

TEST 4.2 = #f#Check for known false
 f

TEST 4.3 = #t#Set a bit
 t

TEST 4.4 = #t#Check that it is now true
 t

PREP
TEST 4.5 = #t#Clear the hash
 t

TEST 4.6 = #f#Check that bit again
 f

PREP
 f

TEST 4.7 ~ #ERROR.*illegal#Attempt to create shared bitmap hash
ERROR:  illegal attempt to define shared BitmapRef shared_bitmap_ref
HINT:  BitmapRefs may only be defined as session, not shared, variables.
TEST 4.8 ~ #session_bitmap_refx#Get bitmap ref from bitmap hash
 session_bitmap_refx

TEST 4.9 ~ #ERROR.*not.*defined#Check ref in transaction
ERROR:  BitmapRef session_bitmap_ref is not defined
HINT:  Perhaps the name is mis-spelled, or its definition is missing from veil_init().
PREP
 session_bitmap_ref

 t                  | t

TEST 4.10 ~ #2 *| *20001 *| *20003#Test bits after setting them
     2 | 20001 | 20003

PREP
 session_bitmap_ref

 t

TEST 4.11 ~ #2 *| *20001 *| *20003#Union and then test bits
WARNING:  there is already a transaction in progress
     2 | 20001 | 20003

PREP
 t

 t

 t

TEST 4.12 ~ #1 *| *20003 *| *20003#Intersect and test bits
     1 | 20003 | 20003

TEST 4.13 ~ #wibble#Test bitmap hash entry (a)
 wibble
 rubble

TEST 4.14 ~ #rubble#Test bitmap hash entry (b)
 wibble
 rubble

TEST 4.15 ~ #20001.*20070#Test range of bitmaps in hash
 20001 | 20070

PREP
 f

TEST 4.16 ~ #ERROR.*illegal.*BitmapHash#Attempt to create shared bitmap hash
ERROR:  illegal attempt to define shared BitmapHash shared_role_privs2
HINT:  BitmapHashes may only be defined as session, not shared, variables.
PREP
 t

 t

TEST 4.17 ~ #3.*20001.*20003#Test union into bitmap hash
     3 | 20001 | 20003

TEST 4.18 ~ #truex#Check for defined bitmap in hash
 truex

TEST 4.19 ~ #falsex#Check for undefined bitmap in hash
 falsex

PREP
                1

TEST 4.20 = #t#Check a bit in the deserialised bitmap hash
 t

TEST 4.21 ~ #1 *| *20003 *| *20003#Count those bits
     1 | 20001 | 20001

-
- ...test set 5: control functions...
PREP IGNORE
- Loading the veil extension...
TEST 5.1 ~ #ERROR.*veil_init#Default init
ERROR:  default veil version of veil_init() has been called
HINT:  You must define your own version of this function.
CONTEXT:  SQL statement "select veil_init(FALSE)"
PREP
TEST 5.2 = #10#Demo init
              10

PREP
TEST 5.3 = #t#Reset once
NOTICE:  veil_init returns true to veil_perform_reset
NOTICE:  vl_complete_context_switch returns true to veil_perform_reset
 t

TEST 5.4 = #1#Check variables after reset
     1

TEST 5.5 = #t#Reset again
ref

 t

TEST 3.15 ~ #1 *| *20003 *| *20003#Check bits in shared bitmap array
     1 | 20003 | 20003
MATCH ~ "1 | 20003 | 20003"

PASS
END TEST 3.15

                1

TEST 3.16 ~ #10001.*10002#Check array range after de-serialisation
 10001 | 10002
MATCH ~ "10001 | 10002"

PASS
END TEST 3.16

TEST 3.17 ~ #20001.*20070#Check bitmaps range after de-serialisation
 20001 | 20070
MATCH ~ "20001 | 20070"

PASS
END TEST 3.17

TEST 3.18 ~ #1 *\| *20003 *\| *20003#Check bits in array after de-ser.
     1 | 20003 | 20003
MATCH ~ "1 | 20003 | 20003"

PASS
END TEST 3.18

              70

TEST 4.1 = #t#Create session bitmap hash
 t
MATCH = "t"

PASS
END TEST 4.1

TEST 4.2 = #f#Check for known false
 f
MATCH = "f"

PASS
END TEST 4.2

TEST 4.3 = #t#Set a bit
 t
MATCH = "t"

PASS
END TEST 4.3

TEST 4.4 = #t#Check that it is now true
 t
MATCH = "t"

PASS
END TEST 4.4

TEST 4.5 = #t#Clear the hash
 t
MATCH = "t"

PASS
END TEST 4.5

TEST 4.6 = #f#Check that bit again
 f
MATCH = "f"

PASS
END TEST 4.6

 f

TEST 4.7 ~ #ERROR.*illegal#Attempt to create shared bitmap hash
ERROR:  illegal attempt to define shared BitmapRef shared_bitmap_ref
MATCH ~ "ERROR:  illegal attempt to define shared BitmapRef shared_bitmap_ref"
HINT:  BitmapRefs may only be defined as session, not shared, variables.
PASS
END TEST 4.7

TEST 4.8 ~ #session_bitmap_refx#Get bitmap ref from bitmap hash
 session_bitmap_refx
MATCH ~ "session_bitmap_refx"

PASS
END TEST 4.8

TEST 4.9 ~ #ERROR.*not.*defined#Check ref in transaction
ERROR:  BitmapRef session_bitmap_ref is not defined
MATCH ~ "ERROR:  BitmapRef session_bitmap_ref is not defined"
HINT:  Perhaps the name is mis-spelled, or its definition is missing from veil_init().
PASS
END TEST 4.9

 session_bitmap_ref

 t                  | t

TEST 4.10 ~ #2 *| *20001 *| *20003#Test bits after setting them
     2 | 20001 | 20003
MATCH ~ "2 | 20001 | 20003"

PASS
END TEST 4.10

 session_bitmap_ref

 t

TEST 4.11 ~ #2 *| *20001 *| *20003#Union and then test bits
WARNING:  there is already a transaction in progress
     2 | 20001 | 20003
MATCH ~ "2 | 20001 | 20003"

PASS
END TEST 4.11

 t

 t

 t

TEST 4.12 ~ #1 *| *20003 *| *20003#Intersect and test bits
     1 | 20003 | 20003
MATCH ~ "1 | 20003 | 20003"

PASS
END TEST 4.12

TEST 4.13 ~ #wibble#Test bitmap hash entry (a)
 wibble
MATCH ~ "wibble"
 rubble

PASS
END TEST 4.13

TEST 4.14 ~ #rubble#Test bitmap hash entry (b)
 wibble
 rubble
MATCH ~ "rubble"

PASS
END TEST 4.14

TEST 4.15 ~ #20001.*20070#Test range of bitmaps in hash
 20001 | 20070
MATCH ~ "20001 | 20070"

PASS
END TEST 4.15

 f

TEST 4.16 ~ #ERROR.*illegal.*BitmapHash#Attempt to create shared bitmap hash
ERROR:  illegal attempt to define shared BitmapHash shared_role_privs2
MATCH ~ "ERROR:  illegal attempt to define shared BitmapHash shared_role_privs2"
HINT:  BitmapHashes may only be defined as session, not shared, variables.
PASS
END TEST 4.16

 t

 t

TEST 4.17 ~ #3.*20001.*20003#Test union into bitmap hash
     3 | 20001 | 20003
MATCH ~ "3 | 20001 | 20003"

PASS
END TEST 4.17

TEST 4.18 ~ #truex#Check for defined bitmap in hash
 truex
MATCH ~ "truex"

PASS
END TEST 4.18

TEST 4.19 ~ #falsex#Check for undefined bitmap in hash
 falsex
MATCH ~ "falsex"

PASS
END TEST 4.19

                1

TEST 4.20 = #t#Check a bit in the deserialised bitmap hash
 t
MATCH = "t"

PASS
END TEST 4.20

TEST 4.21 ~ #1 *| *20003 *| *20003#Count those bits
     1 | 20001 | 20001
MATCH ~ "1 | 20001 | 20001"

PASS
END TEST 4.21

TEST 5.1 ~ #ERROR.*veil_init#Default init
ERROR:  default veil version of veil_init() has been called
MATCH ~ "ERROR:  default veil version of veil_init() has been called"
HINT:  You must define your own version of this function.
CONTEXT:  SQL statement "select veil_init(FALSE)"
PASS
END TEST 5.1

TEST 5.2 = #10#Demo init
              10
MATCH = "10"

PASS
END TEST 5.2

TEST 5.3 = #t#Reset once
NOTICE:  veil_init returns true to veil_perform_reset
NOTICE:  vl_complete_context_switch returns true to veil_perform_reset
 t
MATCH = "t"

PASS
END TEST 5.3

TEST 5.4 = #1#Check variables after reset
     1
MATCH = "1"

PNOTICE:  veil_init returns true to veil_perform_reset
NOTICE:  vl_complete_context_switch returns true to veil_perform_reset
 t

TEST 5.6 = #2#Check variables again
     2

PREP IGNORE
- Loading the veil extension...
TEST 5.7 ~ #ERROR.*veil_init#Reset with failing veil_init
ERROR:  default veil version of veil_init() has been called
HINT:  You must define your own version of this function.
CONTEXT:  SQL statement "select veil_init(TRUE)"
TEST 5.8 ~ #^ *f *$#Failing reset (context switch was left incomplete)
WARNING:  failed to perform reset
DETAIL:  Unable to prepare for memory reset.  Maybe another process is performing a reset, or maybe there is a long-running transaction that is still using the previous memory context.
 f

TEST 5.9 ~ #WARNING.*reset#Again (looking for WARNING message)
WARNING:  failed to perform reset
DETAIL:  Unable to prepare for memory reset.  Maybe another process is performing a reset, or maybe there is a long-running transaction that is still using the previous memory context.
 f

TEST 5.10 ~ #^ *t *$#Force reset
 t

PREP
TEST 5.11 = #t#Reset again
NOTICE:  veil_init returns true to veil_perform_reset
NOTICE:  vl_complete_context_switch returns true to veil_perform_reset
 t

PREP
 f

             100

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

TEST 5.12 = #25#Original bitmap before reset from other session
    25

-
- ...test set 5a: reset from second session (second process)...
TEST 5.13 = #25#Bitmap variable from other session with bits
    25

TEST 5.14 = #t#Successful reset
    25

NOTICE:  veil_init returns true to veil_perform_reset
NOTICE:  vl_complete_context_switch returns true to veil_perform_reset
 t

TEST 5.15 ~ #ERROR.*Undefined#No bitmap variable from other session
 f

ERROR:  type mismatch in bitmap_x: expected Bitmap, got Undefined
DETAIL:  Variable bitmap_x is not of the expected type.
TEST 5.16 = #f#Failed reset as session still in use
WARNING:  failed to perform reset
DETAIL:  Unable to prepare for memory reset.  Maybe another process is performing a reset, or maybe there is a long-running transaction that is still using the previous memory context.
 f

TEST 5.17 ~ #WARNING.*reset#Failed reset as session still in use (again)
WARNING:  failed to perform reset
DETAIL:  Unable to prepare for memory reset.  Maybe another process is performing a reset, or maybe there is a long-running transaction that is still using the previous memory context.
 f

PREP
             100

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

- ...(back from 5a)...
TEST 5.19 = #25#Original Bitmap (from original transaction)
    25

 VEIL_SHMEMCTL | ShmemCtl | t
 bitmap_x      | Bitmap   | t
 range_x       | Range    | f

TEST 5.20 = #15#New bitmap created by other session
    15

-
- ...test set 5b: (like 5a but with opposite contexts)...
TEST 5.21 = #15#Bitmap variable from other session with bits
    15

TEST 5.22 = #t#Successful reset
    15

NOTICE:  veil_init returns true to veil_perform_reset
NOTICE:  vl_complete_context_switch returns true to veil_perform_reset
 t

TEST 5.23 ~ #ERROR.*Undefined#No bitmap variable from other session
 f

ERROR:  type mismatch in bitmap_x: expected Bitmap, got Undefined
DETAIL:  Variable bitmap_x is not of the expected type.
TEST 5.24 = #f#Failed reset as session still in use
WARNING:  failed to perform reset
DETAIL:  Unable to prepare for memory reset.  Maybe another process is performing a reset, or maybe there is a long-running transaction that is still using the previous memory context.
ASS
END TEST 5.4

TEST 5.5 = #t#Reset again
NOTICE:  veil_init returns true to veil_perform_reset
NOTICE:  vl_complete_context_switch returns true to veil_perform_reset
 t
MATCH = "t"

PASS
END TEST 5.5

TEST 5.6 = #2#Check variables again
     2
MATCH = "2"

PASS
END TEST 5.6

TEST 5.7 ~ #ERROR.*veil_init#Reset with failing veil_init
ERROR:  default veil version of veil_init() has been called
MATCH ~ "ERROR:  default veil version of veil_init() has been called"
HINT:  You must define your own version of this function.
CONTEXT:  SQL statement "select veil_init(TRUE)"
PASS
END TEST 5.7

TEST 5.8 ~ #^ *f *$#Failing reset (context switch was left incomplete)
WARNING:  failed to perform reset
DETAIL:  Unable to prepare for memory reset.  Maybe another process is performing a reset, or maybe there is a long-running transaction that is still using the previous memory context.
 f
MATCH ~ "f"

PASS
END TEST 5.8

TEST 5.9 ~ #WARNING.*reset#Again (looking for WARNING message)
WARNING:  failed to perform reset
MATCH ~ "WARNING:  failed to perform reset"
DETAIL:  Unable to prepare for memory reset.  Maybe another process is performing a reset, or maybe there is a long-running transaction that is still using the previous memory context.
 f

PASS
END TEST 5.9

TEST 5.10 ~ #^ *t *$#Force reset
 t
MATCH ~ "t"

PASS
END TEST 5.10

TEST 5.11 = #t#Reset again
NOTICE:  veil_init returns true to veil_perform_reset
NOTICE:  vl_complete_context_switch returns true to veil_perform_reset
 t
MATCH = "t"

PASS
END TEST 5.11

 f

             100

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

TEST 5.12 = #25#Original bitmap before reset from other session
    25
MATCH = "25"

PASS
END TEST 5.12

TEST 5.13 = #25#Bitmap variable from other session with bits
    25
MATCH = "25"

PASS
END TEST 5.13

TEST 5.14 = #t#Successful reset
    25

NOTICE:  veil_init returns true to veil_perform_reset
NOTICE:  vl_complete_context_switch returns true to veil_perform_reset
 t
MATCH = "t"

PASS
END TEST 5.14

TEST 5.15 ~ #ERROR.*Undefined#No bitmap variable from other session
 f

ERROR:  type mismatch in bitmap_x: expected Bitmap, got Undefined
MATCH ~ "ERROR:  type mismatch in bitmap_x: expected Bitmap, got Undefined"
DETAIL:  Variable bitmap_x is not of the expected type.
PASS
END TEST 5.15

TEST 5.16 = #f#Failed reset as session still in use
WARNING:  failed to perform reset
DETAIL:  Unable to prepare for memory reset.  Maybe another process is performing a reset, or maybe there is a long-running transaction that is still using the previous memory context.
 f
MATCH = "f"

PASS
END TEST 5.16

TEST 5.17 ~ #WARNING.*reset#Failed reset as session still in use (again)
WARNING:  failed to perform reset
MATCH ~ "WARNING:  failed to perform reset"
DETAIL:  Unable to prepare for memory reset.  Maybe another process is performing a reset, or maybe there is a long-running transaction that is still using the previous memory context.
 f

PASS
END TEST 5.17

             100

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

TEST 5.19 = #25#Original Bitmap (from original transaction)
    25
MATCH = "25"

 VEIL_SHMEMCTL | ShmemCtl | t
 bitmap_x      | Bitmap   | t
 range_x       | Range    | f

PASS
END TEST 5.19

TEST 5.20 = #15#New bitmap created by other session
    15
MATCH = "15"

PASS
END TEST 5.20

TEST 5.21 = #15#Bitmap variable from other session with bits
    15
MATCH = "15"

PASS
END TEST 5.21

TEST 5.22 = #t#Successful reset
    15

NOTICE:  veil_init returns true to veil_perform_reset
NOTICE:  vl_complete_context_switch returns true to veil_perform_reset
 t
MATCH = "t"

PASS
END TEST 5.22

TEST 5.23 ~ #ERROR.*Undefined#No bitmap variable from other session
 f

ERROR:  type mismatch in bitmap_x: expected Bitmap, got Undefined
MATCH ~ "ERROR:  type mismatch in bitmap_x: expected Bitmap, got Undefined"
DETAIL:  Variable bitmap_x is not of the expected type.
PASS
END TEST 5.23

TEST 5.24 = #f#Failed reset as session still in use
WARNING:  failed to perform reset
DETAIL:  Unable to prepare for memo f

TEST 5.25 ~ #WARNING.*reset#Failed reset as session still in use (again)
WARNING:  failed to perform reset
DETAIL:  Unable to prepare for memory reset.  Maybe another process is performing a reset, or maybe there is a long-running transaction that is still using the previous memory context.
 f

PREP
             100

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

- ...(back from 5b)...
TEST 5.98 = #15#Original Bitmap (from original transaction)
    15

 bitmap_x | Bitmap | t
 range_x  | Range  | f

TEST 5.99 = #24#New bitmap created by other session
    24

-
- ...test set 6: veil_init() doing something useful...
PREP IGNORE
- Loading the veil extension...
TEST 6.1 ~ #ERROR.*veil_init#Default init
ERROR:  default veil version of veil_init() has been called
HINT:  You must define your own version of this function.
CONTEXT:  SQL statement "select veil_init(FALSE)"
PREP IGNORE
 t

TEST 6.2 ~ #shared2.*Undefined.*t#Undefined shared variable
 VEIL_SHMEMCTL | ShmemCtl  | t
 shared1       | Int4      | t
 shared2       | Undefined | t
 bitmap_x      | Bitmap    | t

TEST 6.3 ~ #shared1.*Int4.*t#Defined shared variable
 VEIL_SHMEMCTL | ShmemCtl  | t
 shared1       | Int4      | t
 shared2       | Undefined | t
 bitmap_x      | Bitmap    | t

PREP IGNORE
NOTICE:  veil_init returns true to veil_perform_reset
NOTICE:  vl_complete_context_switch returns true to veil_perform_reset
 t

TEST 6.4 ~ #shared2.*Undefined.*t#Undefined shared variable
 shared1 | Int4      | t
 shared2 | Undefined | t

TEST 6.5 ~ #shared1.*Int4.*t#Defined shared variable
 shared1 | Int4      | t
 shared2 | Undefined | t

-
- ...test set 7: veil_init() triggering SPI bug...
PREP IGNORE
ERROR:  database "regressdb2" does not exist
- Loading the veil extension...
NOTICE:  extension "veil" does not exist, skipping
ERROR:  language "plpgsql" already exists
TEST 7.1 = #9#Test for SPI bug
        9

COMPLETE
ry reset.  Maybe another process is performing a reset, or maybe there is a long-running transaction that is still using the previous memory context.
 f
MATCH = "f"

PASS
END TEST 5.24

TEST 5.25 ~ #WARNING.*reset#Failed reset as session still in use (again)
WARNING:  failed to perform reset
MATCH ~ "WARNING:  failed to perform reset"
DETAIL:  Unable to prepare for memory reset.  Maybe another process is performing a reset, or maybe there is a long-running transaction that is still using the previous memory context.
 f

PASS
END TEST 5.25

             100

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

 t

TEST 5.98 = #15#Original Bitmap (from original transaction)
    15
MATCH = "15"

 bitmap_x | Bitmap | t
 range_x  | Range  | f

PASS
END TEST 5.98

TEST 5.99 = #24#New bitmap created by other session
    24
MATCH = "24"

PASS
END TEST 5.99

TEST 6.1 ~ #ERROR.*veil_init#Default init
ERROR:  default veil version of veil_init() has been called
MATCH ~ "ERROR:  default veil version of veil_init() has been called"
HINT:  You must define your own version of this function.
CONTEXT:  SQL statement "select veil_init(FALSE)"
PASS
END TEST 6.1

 t

TEST 6.2 ~ #shared2.*Undefined.*t#Undefined shared variable
 VEIL_SHMEMCTL | ShmemCtl  | t
 shared1       | Int4      | t
 shared2       | Undefined | t
MATCH ~ "shared2       | Undefined | t"
 bitmap_x      | Bitmap    | t

PASS
END TEST 6.2

TEST 6.3 ~ #shared1.*Int4.*t#Defined shared variable
 VEIL_SHMEMCTL | ShmemCtl  | t
 shared1       | Int4      | t
MATCH ~ "shared1       | Int4      | t"
 shared2       | Undefined | t
 bitmap_x      | Bitmap    | t

PASS
END TEST 6.3

NOTICE:  veil_init returns true to veil_perform_reset
NOTICE:  vl_complete_context_switch returns true to veil_perform_reset
 t

TEST 6.4 ~ #shared2.*Undefined.*t#Undefined shared variable
 shared1 | Int4      | t
 shared2 | Undefined | t
MATCH ~ "shared2 | Undefined | t"

PASS
END TEST 6.4

TEST 6.5 ~ #shared1.*Int4.*t#Defined shared variable
 shared1 | Int4      | t
MATCH ~ "shared1 | Int4      | t"
 shared2 | Undefined | t

PASS
END TEST 6.5

ERROR:  database "regressdb2" does not exist
NOTICE:  extension "veil" does not exist, skipping
ERROR:  language "plpgsql" already exists
TEST 7.1 = #9#Test for SPI bug
        9
MATCH = "9"

COMPLETE
PASS
END TEST 7.1


tests:     117
passed:    117
failed:    0

- Dropping regressdb...
